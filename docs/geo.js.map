{"version":3,"file":"geo.js","sources":["../src/index.js"],"sourcesContent":["import {useEffect, useState} from 'react'\n\nconst useGeolocation = ({enableHighAccuracy, maximumAge, timeout} = {}, callback) => {\n\n  const [coordinates, setCoordinates] = useState({\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: null,\n    longitude: null,\n    speed: null,\n    timestamp: null,\n    error: null\n  })\n\n  useEffect(() => {\n    let didCancel\n    const updateCoordinates = ({coords = {}, timestamp}) => {\n      const {\n        accuracy,\n        altitude,\n        altitudeAccuracy,\n        heading,\n        latitude,\n        longitude,\n        speed\n      } = coords\n      if (!didCancel) {\n        setCoordinates({\n          accuracy,\n          altitude,\n          altitudeAccuracy,\n          heading,\n          latitude,\n          longitude,\n          speed,\n          timestamp,\n          error: null\n        })\n        if (callback instanceof Function) {\n          callback({\n            accuracy,\n            altitude,\n            altitudeAccuracy,\n            heading,\n            latitude,\n            longitude,\n            speed,\n            timestamp,\n            error: null\n          })\n        }\n      }\n    }\n\n    const setError = error => {\n      if (!didCancel) {\n        setCoordinates({\n          accuracy: null,\n          altitude: null,\n          altitudeAccuracy: null,\n          heading: null,\n          latitude: null,\n          longitude: null,\n          speed: null,\n          timestamp: null,\n          error\n        })\n      }\n    }\n\n    let watchId\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(updateCoordinates, setError)\n      watchId = navigator.geolocation.watchPosition(\n        updateCoordinates,\n        setError,\n        {enableHighAccuracy, maximumAge, timeout}\n      )\n    }\n    return () => {\n      if (watchId) {\n        navigator.geolocation.clearWatch(watchId)\n      }\n      didCancel = true\n    }\n  }, [callback, enableHighAccuracy, maximumAge, timeout])\n\n  return coordinates\n}\n\nexport default useGeolocation\n"],"names":["useGeolocation","enableHighAccuracy","maximumAge","timeout","callback","useState","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","timestamp","error","coordinates","setCoordinates","useEffect","didCancel","watchId","updateCoordinates","coords","Function","setError","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch"],"mappings":"ggCAEA,IAAMA,EAAiB,wEAA6C,GAA3CC,IAAAA,mBAAoBC,IAAAA,WAAYC,IAAAA,QAAeC,2CAEhCC,EAAS,CAC7CC,SAAU,KACVC,SAAU,KACVC,iBAAkB,KAClBC,QAAS,KACTC,SAAU,KACVC,UAAW,KACXC,MAAO,KACPC,UAAW,KACXC,MAAO,gBATFC,OAAaC,cAYpBC,GAAU,eACJC,EAuDAC,EAtDEC,EAAoB,oBAAEC,OAAAA,aAAS,KAAIR,IAAAA,UAErCP,EAOEe,EAPFf,SACAC,EAMEc,EANFd,SACAC,EAKEa,EALFb,iBACAC,EAIEY,EAJFZ,QACAC,EAGEW,EAHFX,SACAC,EAEEU,EAFFV,UACAC,EACES,EADFT,MAEGM,IACHF,EAAe,CACbV,SAAAA,EACAC,SAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,MAAO,OAELV,aAAoBkB,UACtBlB,EAAS,CACPE,SAAAA,EACAC,SAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,MAAO,SAMTS,EAAW,SAAAT,GACVI,GACHF,EAAe,CACbV,SAAU,KACVC,SAAU,KACVC,iBAAkB,KAClBC,QAAS,KACTC,SAAU,KACVC,UAAW,KACXC,MAAO,KACPC,UAAW,KACXC,MAAAA,YAMFU,UAAUC,cACZD,UAAUC,YAAYC,mBAAmBN,EAAmBG,GAC5DJ,EAAUK,UAAUC,YAAYE,cAC9BP,EACAG,EACA,CAACtB,mBAAAA,EAAoBC,WAAAA,EAAYC,QAAAA,KAG9B,WACDgB,GACFK,UAAUC,YAAYG,WAAWT,GAEnCD,GAAY,KAEb,CAACd,EAAUH,EAAoBC,EAAYC,IAEvCY"}